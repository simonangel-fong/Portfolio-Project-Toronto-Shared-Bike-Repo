name: "Staging Pipeline"

on:
  push:
    branches:
      - staging
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - staging

env:
  # terraform
  TF_VERSION: 1.9.8
  TF_VAR_project: "toronto-shared-bike"
  TF_VAR_app: "data-warehouse"
  TF_VAR_env: staging
  TF_VAR_dns_domain: "trip-staging.arguswatcher.net"
  TF_VAR_aws_region: ${{ vars.AWS_REGION }}
  TF_VAR_cloudflare_api_token: ${{secrets.CF_API_TOKEN}}
  TF_VAR_cloudflare_zone_id: ${{secrets.CF_ZONE}}
  # threshold
  SLA_FAIL: "0.01"
  SLA_DUR_99: "1000"
permissions:
  id-token: write
  contents: read

jobs:
  staging_terraform_plan:
    name: Staging - Terraform Plan
    runs-on: ubuntu-latest
    env:
      TF_WORKING_DIR: src/aws
      TF_PLUGIN_CACHE_DIR: /home/runner/.terraform.d/plugin-cache
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_TF_ROLE_ARN }}
          aws-region: ${{ env.TF_VAR_aws_region }}

      - name: Cache Terraform providers and modules
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.TF_PLUGIN_CACHE_DIR }}
            ${{ env.TF_WORKING_DIR }}/.terraform/modules
          key: ${{ runner.os }}-tf-${{ env.TF_VERSION }}-${{ hashFiles(format('{0}/**/.terraform.lock.hcl', env.TF_WORKING_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-tf-${{ env.TF_VERSION }}-
            ${{ runner.os }}-tf-

      - name: Terraform init (S3 backend)
        run: |
          terraform init -reconfigure -input=false \
            -backend-config="bucket=${{ secrets.AWS_BACKEND_BUCKET }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="key=${{ secrets.AWS_BACKEND_BUCKET_KEY }}/${{ env.TF_VAR_env }}/terraform.tfstate" \
            -backend-config="encrypt=true"

      - name: Terraform fmt
        run: terraform fmt -check -recursive -no-color

      - name: Terraform validate
        run: terraform validate -no-color

      - name: Terraform plan
        run: terraform plan -out=tfplan -input=false -no-color

      - name: Save plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ${{ env.TF_WORKING_DIR }}/tfplan
          retention-days: 1

      - name: Send email notification on failure
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465`
          secure: true
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "✉️ ${{ env.TF_VAR_project}} ${{env.TF_VAR_app}} (${{env.TF_VAR_env}}): ${{ github.job }} ${{ job.status }}"
          to: ${{ secrets.EMAIL_USERNAME }}
          from: ${{ secrets.EMAIL_USERNAME }}
          html_body: |
            <h2>GitHub Actions CI/CD Notification</h2>
            <p><b>Project</b>: ${{ env.TF_VAR_project}}</p>
            <p><b>Application</b>: ${{ env.TF_VAR_app}}</p>
            <p><b>Repository</b>: ${{ github.repository }}</p>
            <p><b>Env</b>: ${{ env.TF_VAR_env }}</p>
            <p><b>Job</b>: ${{ github.job }}</p>
            <p><b>Status</b>: ${{ job.status }}</p>
            <p><b>Branch</b>: ${{ github.ref }}</p>
            <p><b>Workflow</b>: ${{ github.workflow }}</p>
            <p><b>Commit</b>: ${{ github.sha }}</p>
            <p><a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Workflow Run</a></p>

  staging_terraform_apply:
    name: Staging - Terraform Apply
    needs: staging_terraform_plan
    if: github.ref == 'refs/heads/master' && success()
    runs-on: ubuntu-latest
    env:
      TF_WORKING_DIR: src/aws
      TF_PLUGIN_CACHE_DIR: /home/runner/.terraform.d/plugin-cache
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_TF_ROLE_ARN }}
          aws-region: ${{ env.TF_VAR_aws_region }}

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ${{ env.TF_WORKING_DIR }}

      - name: Cache Terraform providers and modules
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.TF_PLUGIN_CACHE_DIR }}
            ${{ env.TF_WORKING_DIR }}/.terraform/modules
          key: ${{ runner.os }}-tf-${{ env.TF_VERSION }}-${{ hashFiles(format('{0}/**/.terraform.lock.hcl', env.TF_WORKING_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-tf-${{ env.TF_VERSION }}-
            ${{ runner.os }}-tf-

      - name: Terraform init (S3 backend)
        run: |
          terraform init -reconfigure -input=false \
            -backend-config="bucket=${{ secrets.AWS_BACKEND_BUCKET }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="key=${{ secrets.AWS_BACKEND_BUCKET_KEY }}/${{ env.TF_VAR_env }}/terraform.tfstate" \
            -backend-config="encrypt=true"

      - name: Terraform apply
        run: terraform apply -auto-approve -input=false -no-color tfplan

      - name: Send email notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465`
          secure: true
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "✉️ ${{ env.TF_VAR_project}} ${{env.TF_VAR_app}} (${{env.TF_VAR_env}}): ${{ github.job }} ${{ job.status }}"
          to: ${{ secrets.EMAIL_USERNAME }}
          from: ${{ secrets.EMAIL_USERNAME }}
          html_body: |
            <h2>GitHub Actions CI/CD Notification</h2>
            <p><b>Project</b>: ${{ env.TF_VAR_project}}</p>
            <p><b>Application</b>: ${{ env.TF_VAR_app}}</p>
            <p><b>Repository</b>: ${{ github.repository }}</p>
            <p><b>Env</b>: ${{ env.TF_VAR_env }}</p>
            <p><b>Job</b>: ${{ github.job }}</p>
            <p><b>Status</b>: ${{ job.status }}</p>
            <p><b>Branch</b>: ${{ github.ref }}</p>
            <p><b>Workflow</b>: ${{ github.workflow }}</p>
            <p><b>Commit</b>: ${{ github.sha }}</p>
            <p><a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Workflow Run</a></p>

  testing:
    name: Testing - K6
    needs: staging_terraform_apply
    if: github.ref == 'refs/heads/master' && success()
    runs-on: ubuntu-latest
    env:
      TF_WORKING_DIR: src/aws
      TF_PLUGIN_CACHE_DIR: /home/runner/.terraform.d/plugin-cache
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup K6
        uses: grafana/setup-k6-action@v1

      - name: Run local k6 test
        uses: grafana/run-k6-action@v1
        id: testing_k6
        env:
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}
          K6_CLOUD_PROJECT_ID: ${{ secrets.K6_CLOUD_PROJECT_ID }}
          DNS_DOMAIN: ${{ env.TF_VAR_dns_domain }}
          API_ENV: ${{ env.TF_VAR_env }}
          SLA_FAIL: "0.01"
          SLA_DUR_99: "1000"

        with:
          debug: true
          # parallel: true # run tests in parallel
          # fail-fast: false # fail the step early if any test fails
          path: |
            test/script/cloud_smoke.js

      - name: Send email notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465`
          secure: true
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "✉️ ${{ env.TF_VAR_project}} ${{env.TF_VAR_app}} (${{env.TF_VAR_env}}): ${{ github.job }} ${{ job.status }}"
          to: ${{ secrets.EMAIL_USERNAME }}
          from: ${{ secrets.EMAIL_USERNAME }}
          html_body: |
            <h2>GitHub Actions CI/CD Notification</h2>
            <p><b>Project</b>: ${{ env.TF_VAR_project}}</p>
            <p><b>Application</b>: ${{ env.TF_VAR_app}}</p>
            <p><b>Repository</b>: ${{ github.repository }}</p>
            <p><b>Env</b>: ${{ env.TF_VAR_env }}</p>
            <p><b>Job</b>: ${{ github.job }}</p>
            <p><b>Status</b>: ${{ job.status }}</p>
            <p><b>Branch</b>: ${{ github.ref }}</p>
            <p><b>Test ID</b>: ${{ steps.testing_k6.outputs.testRunIds }}</p>
            <p><b>Workflow</b>: ${{ github.workflow }}</p>
            <p><b>Commit</b>: ${{ github.sha }}</p>
            <p><a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Workflow Run</a></p>
