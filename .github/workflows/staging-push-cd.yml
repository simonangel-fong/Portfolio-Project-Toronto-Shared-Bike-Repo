name: testing-push-cd

on:
  push:
    branches: ["staging"]
    paths:
      - "src/**" # update of code
      - "test/**" # update of test case
      - ".github/workflows/staging-push-cd.yml"

permissions:
  contents: read
  id-token: write

concurrency:
  group: testing-env-${{ github.ref }}
  cancel-in-progress: true

env:
  TF_VERSION: 1.9.8
  TF_VAR_project: "toronto-shared-bike"
  TF_VAR_app: "web-app"
  TF_VAR_env: "staging"
  TF_VAR_dns_domain: "trip-staging.arguswatcher.net"
  TF_VAR_aws_region: ${{ vars.AWS_REGION }}
  TF_VAR_cloudflare_api_token: ${{secrets.CF_API_TOKEN}}
  TF_VAR_cloudflare_zone_id: ${{secrets.CF_ZONE}}
  TF_DIR: src/web-app/aws
  TEST_DIR: test

jobs:
  provision_staging:
    name: Provision Staging Env
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      TF_PLUGIN_CACHE_DIR: /home/runner/.terraform.d/plugin-cache
    defaults:
      run:
        working-directory: ${{ env.TF_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_TF_ROLE_ARN }}
          aws-region: ${{ env.TF_VAR_aws_region }}

      - name: Configure Terraform plugin cache
        run: |
          mkdir -pv ~/.terraform.d/plugin-cache
          echo 'plugin_cache_dir = "~/.terraform.d/plugin-cache"' > ~/.terraformrc

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ env.TF_VERSION }}

      - name: Terraform init - S3 backend
        run: |
          terraform init -reconfigure -input=false \
            -backend-config="bucket=${{ secrets.AWS_BACKEND_BUCKET }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="key=${{ secrets.AWS_BACKEND_BUCKET_KEY }}/${{ env.TF_VAR_env }}/terraform.tfstate" \
            -backend-config="encrypt=true"

      - name: Terraform Validate
        run: |
          terraform fmt -check -recursive -no-color
          terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan -input=false -no-color

      - name: Save plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ${{ env.TF_DIR }}/tfplan
          retention-days: 1

      - name: Terraform Apply - Staging
        run: terraform apply -auto-approve -no-color tfplan

  ci_testing:
    name: Integrate Testing - K6
    needs: provision_staging
    if: github.ref == 'refs/heads/staging' && success()
    runs-on: ubuntu-latest
    env:
      TF_WORKING_DIR: src/aws
      TF_PLUGIN_CACHE_DIR: /home/runner/.terraform.d/plugin-cache
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup K6
        uses: grafana/setup-k6-action@v1

      - name: Run local k6 test
        uses: grafana/run-k6-action@v1
        id: testing_k6
        env:
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}
          K6_CLOUD_PROJECT_ID: ${{ secrets.K6_CLOUD_PROJECT_ID }}
          DNS_DOMAIN: ${{ env.TF_VAR_dns_domain }}
          API_ENV: ${{ env.TF_VAR_env }}
          SLA_FAIL: "0.01"
          SLA_DUR_99: "1000"
        with:
          debug: true
          path: |
            test/script/cloud_smoke.js

      - name: Send email notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465`
          secure: true
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "✉️ ${{ env.TF_VAR_project}} ${{env.TF_VAR_app}} (${{env.TF_VAR_env}}): ${{ github.job }} ${{ job.status }}"
          to: ${{ secrets.EMAIL_USERNAME }}
          from: ${{ secrets.EMAIL_USERNAME }}
          html_body: |
            <h2>GitHub Actions CI/CD Notification</h2>
            <p><b>Project</b>: ${{ env.TF_VAR_project}}</p>
            <p><b>Application</b>: ${{ env.TF_VAR_app}}</p>
            <p><b>Repository</b>: ${{ github.repository }}</p>
            <p><b>Env</b>: ${{ env.TF_VAR_env }}</p>
            <p><b>Job</b>: ${{ github.job }}</p>
            <p><b>Status</b>: ${{ job.status }}</p>
            <p><b>Branch</b>: ${{ github.ref }}</p>
            <p><b>Test ID</b>: ${{ steps.testing_k6.outputs.testRunIds }}</p>
            <p><b>Workflow</b>: ${{ github.workflow }}</p>
            <p><b>Commit</b>: ${{ github.sha }}</p>
            <p><a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Workflow Run</a></p>

    #   # ---- Integration tests (example with Python/pytest; swap to your stack) ----
    #   - name: Setup Python
    #     uses: actions/setup-python@v5
    #     with:
    #       python-version: "3.11"

    #   - name: Install test deps
    #     working-directory: ${{ env.TEST_DIR }}
    #     run: |
    #       if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    #       pip install pytest pytest-html

    #   - name: Run integration tests
    #     id: integ
    #     working-directory: ${{ env.TEST_DIR }}
    #     run: |
    #       mkdir -p reports
    #       pytest -q --maxfail=1 --disable-warnings --html=reports/report.html --self-contained-html
    #     continue-on-error: false

    #   - name: Upload test report
    #     uses: actions/upload-artifact@v4
    #     if: always()
    #     with:
    #       name: integration-test-report
    #       path: ${{ env.TEST_DIR }}/reports
    #       if-no-files-found: ignore

    #   # ---- Teardown ALWAYS, even if tests fail ----
    #   - name: Terraform Destroy (cleanup)
    #     if: always()
    #     working-directory: ${{ env.TF_DIR }}
    #     run: terraform destroy -auto-approve -no-color

    #   # ---- Notifications ----
    #   - name: Job summary
    #     if: always()
    #     run: |
    #       {
    #         echo "## Integration Testing (Ephemeral Env)"
    #         echo "- **Project**: ${{ env.PROJECT }}"
    #         echo "- **App**: ${{ env.APP }}"
    #         echo "- **Env**: ${{ env.ENV }}"
    #         echo "- **Status**: ${{ job.status }}"
    #         echo "- **Branch**: ${{ github.ref }}"
    #         echo "- **Commit**: ${{ github.sha }}"
    #         echo ""
    #         echo "[View run](${{
    #           github.server_url }}/${
    #           github.repository
    #         }}/actions/runs/${{ github.run_id }})"
    #       } >> "$GITHUB_STEP_SUMMARY"

    #   # Slack (optional): set SLACK_WEBHOOK_URL as a repo secret to enable
    #   - name: Notify Slack (QA & SysAdmin)
    #     if: always() && env.SLACK_NOTIFY == 'true'
    #     uses: slackapi/slack-github-action@v1.26.0
    #     with:
    #       payload: |
    #         {
    #           "text": ":test_tube: *Testing CI* `${{ env.APP }}` in `${{ env.ENV }}`",
    #           "attachments": [
    #             {
    #               "color": "${{ job.status == 'success' && '#2eb886' || '#d00000' }}",
    #               "fields": [
    #                 { "title": "Project", "value": "${{ env.PROJECT }}", "short": true },
    #                 { "title": "Status", "value": "${{ job.status }}", "short": true },
    #                 { "title": "Branch", "value": "${{ github.ref }}", "short": true },
    #                 { "title": "Commit", "value": "${{ github.sha }}", "short": false },
    #                 { "title": "Run", "value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}", "short": false }
    #               ]
    #             }
    #           ]
    #         }
    #     env:
    #       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    #   # Email (optional) — if you prefer email instead/in addition to Slack
    #   - name: Send email
    #     if: always() && env.SEND_EMAIL == 'true'
    #     uses: dawidd6/action-send-mail@v3
    #     with:
    #       server_address: smtp.gmail.com
    #       server_port: 465
    #       secure: true
    #       username: ${{ secrets.EMAIL_USERNAME }}
    #       password: ${{ secrets.EMAIL_PASSWORD }}
    #       subject: "Testing CI: ${{ env.PROJECT }} ${{ env.APP }} (${{ env.ENV }}) — ${{ job.status }}"
    #       to: ${{ secrets.QA_AND_SYSADMIN_EMAILS || secrets.EMAIL_USERNAME }}
    #       from: ${{ secrets.EMAIL_USERNAME }}
    #       html_body: |
    #         <h2>Integration Testing (Ephemeral Env)</h2>
    #         <p><b>Status</b>: ${{ job.status }}</p>
    #         <p><b>Branch</b>: ${{ github.ref }}</p>
    #         <p><b>Commit</b>: ${{ github.sha }}</p>
    #         <p><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">Run Details</a></p>
