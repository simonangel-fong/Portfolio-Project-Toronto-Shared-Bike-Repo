# .github/workflows/testing-push-cd.yml
name: testing-push-cd

on:
  push:
    branches: ["testing"]
    paths:
      - "test/**"            # auto-runs when test cases change
      - "infra/**"           # include infra changes
      - ".github/workflows/testing-push-cd.yml"

permissions:
  contents: read
  id-token: write            # needed for AWS OIDC

concurrency:
  group: testing-env-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: ca-central-1               # <- change if needed
  AWS_ROLE_ARN: arn:aws:iam::<acct>:role/<gha-oidc-role> # <- set your role
  TF_DIR: infra                          # terraform working directory
  TEST_DIR: test                         # integration tests folder
  TF_VERSION: 1.9.8
  PROJECT: toronto-shared-bike
  APP: restful-api
  ENV: testing

jobs:
  provision_and_test:
    name: Provision → Integration Tests → Teardown
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ env.TF_VERSION }}

    #   - name: Configure TF plugin cache
    #     run: |
    #       mkdir -p ~/.terraform.d/plugin-cache
    #       echo 'plugin_cache_dir = "~/.terraform.d/plugin-cache"' > ~/.terraformrc

    #   - name: Terraform Init
    #     working-directory: ${{ env.TF_DIR }}
    #     run: terraform init -no-color

    #   - name: Terraform Validate
    #     working-directory: ${{ env.TF_DIR }}
    #     run: |
    #       terraform fmt -check -recursive -no-color
    #       terraform validate -no-color

    #   - name: Terraform Plan (for logging)
    #     id: plan
    #     working-directory: ${{ env.TF_DIR }}
    #     run: terraform plan -no-color -out=tfplan

    #   - name: Upload Plan (artifact)
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: terraform-plan
    #       path: ${{ env.TF_DIR }}/tfplan
    #       if-no-files-found: ignore

    #   - name: Terraform Apply (Ephemeral Testing Env)
    #     working-directory: ${{ env.TF_DIR }}
    #     run: terraform apply -auto-approve -no-color tfplan

    #   # ---- Integration tests (example with Python/pytest; swap to your stack) ----
    #   - name: Setup Python
    #     uses: actions/setup-python@v5
    #     with:
    #       python-version: "3.11"

    #   - name: Install test deps
    #     working-directory: ${{ env.TEST_DIR }}
    #     run: |
    #       if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    #       pip install pytest pytest-html

    #   - name: Run integration tests
    #     id: integ
    #     working-directory: ${{ env.TEST_DIR }}
    #     run: |
    #       mkdir -p reports
    #       pytest -q --maxfail=1 --disable-warnings --html=reports/report.html --self-contained-html
    #     continue-on-error: false

    #   - name: Upload test report
    #     uses: actions/upload-artifact@v4
    #     if: always()
    #     with:
    #       name: integration-test-report
    #       path: ${{ env.TEST_DIR }}/reports
    #       if-no-files-found: ignore

    #   # ---- Teardown ALWAYS, even if tests fail ----
    #   - name: Terraform Destroy (cleanup)
    #     if: always()
    #     working-directory: ${{ env.TF_DIR }}
    #     run: terraform destroy -auto-approve -no-color

    #   # ---- Notifications ----
    #   - name: Job summary
    #     if: always()
    #     run: |
    #       {
    #         echo "## Integration Testing (Ephemeral Env)"
    #         echo "- **Project**: ${{ env.PROJECT }}"
    #         echo "- **App**: ${{ env.APP }}"
    #         echo "- **Env**: ${{ env.ENV }}"
    #         echo "- **Status**: ${{ job.status }}"
    #         echo "- **Branch**: ${{ github.ref }}"
    #         echo "- **Commit**: ${{ github.sha }}"
    #         echo ""
    #         echo "[View run](${{
    #           github.server_url }}/${
    #           github.repository
    #         }}/actions/runs/${{ github.run_id }})"
    #       } >> "$GITHUB_STEP_SUMMARY"

    #   # Slack (optional): set SLACK_WEBHOOK_URL as a repo secret to enable
    #   - name: Notify Slack (QA & SysAdmin)
    #     if: always() && env.SLACK_NOTIFY == 'true'
    #     uses: slackapi/slack-github-action@v1.26.0
    #     with:
    #       payload: |
    #         {
    #           "text": ":test_tube: *Testing CI* `${{ env.APP }}` in `${{ env.ENV }}`",
    #           "attachments": [
    #             {
    #               "color": "${{ job.status == 'success' && '#2eb886' || '#d00000' }}",
    #               "fields": [
    #                 { "title": "Project", "value": "${{ env.PROJECT }}", "short": true },
    #                 { "title": "Status", "value": "${{ job.status }}", "short": true },
    #                 { "title": "Branch", "value": "${{ github.ref }}", "short": true },
    #                 { "title": "Commit", "value": "${{ github.sha }}", "short": false },
    #                 { "title": "Run", "value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}", "short": false }
    #               ]
    #             }
    #           ]
    #         }
    #     env:
    #       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    #   # Email (optional) — if you prefer email instead/in addition to Slack
    #   - name: Send email
    #     if: always() && env.SEND_EMAIL == 'true'
    #     uses: dawidd6/action-send-mail@v3
    #     with:
    #       server_address: smtp.gmail.com
    #       server_port: 465
    #       secure: true
    #       username: ${{ secrets.EMAIL_USERNAME }}
    #       password: ${{ secrets.EMAIL_PASSWORD }}
    #       subject: "Testing CI: ${{ env.PROJECT }} ${{ env.APP }} (${{ env.ENV }}) — ${{ job.status }}"
    #       to: ${{ secrets.QA_AND_SYSADMIN_EMAILS || secrets.EMAIL_USERNAME }}
    #       from: ${{ secrets.EMAIL_USERNAME }}
    #       html_body: |
    #         <h2>Integration Testing (Ephemeral Env)</h2>
    #         <p><b>Status</b>: ${{ job.status }}</p>
    #         <p><b>Branch</b>: ${{ github.ref }}</p>
    #         <p><b>Commit</b>: ${{ github.sha }}</p>
    #         <p><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">Run Details</a></p>
