name: Dev CI/CD

on:
  pull_request:
    paths:
      - "csv/**"
      - "lambda/**"
      - "module/**"
      - "prod/**"
      - "web/**"
      - ".github/workflows/**"
  push:
    branches: ["master"]
    paths:
      - "csv/**"
      - "lambda/**"
      - "module/**"
      - "prod/**"
      - "web/**"
      - ".github/workflows/**"
  workflow_dispatch: {}

env:
  TERRAFORM_VERSION: 1.7.5
  TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
  TF_WORKING_DIR: prod
  TF_VAR_aws_region: ${{ vars.AWS_REGION }}
  TF_VAR_cloudflare_api_token: ${{secrets.CF_API_TOKEN}}
  TF_VAR_cloudflare_zone_id: ${{secrets.CF_ZONE}}

permissions:
  id-token: write
  contents: read

jobs:
  dev_validate_and_plan:
    name: Dev Validate & Plan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_TF_ROLE_ARN }}
          aws-region: ${{ env.TF_VAR_aws_region }}

      - name: Cache .terraform
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            ${{ env.TF_WORKING_DIR }}/.terraform
          key: ${{ runner.os }}-tf-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tf-

      - name: Terraform init (S3 backend)
        run: |
          terraform init -reconfigure -input=false \
            -backend-config="bucket=${{ secrets.AWS_BACKEND_BUCKET }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="key=${{ secrets.AWS_BACKEND_BUCKET_KEY }}" \
            -backend-config="encrypt=true"

      - name: Terraform fmt
        run: terraform fmt -check -recursive -no-color

      - name: Terraform validate
        run: terraform validate -no-color

      - name: Terraform plan
        run: terraform plan -out=tfplan -input=false -no-color

      - name: Save plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ${{ env.TF_WORKING_DIR }}/tfplan

  dev_apply:
    name: Dev Apply
    needs: dev_validate_and_plan
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_TF_ROLE_ARN }}
          aws-region: ${{ env.TF_VAR_aws_region }}

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ${{ env.TF_WORKING_DIR }}

      - name: Terraform init (S3 backend)
        run: |
          terraform init -reconfigure -input=false \
            -backend-config="bucket=${{ secrets.AWS_BACKEND_BUCKET }}" \
            -backend-config="region=${{ vars.AWS_REGION }}" \
            -backend-config="key=${{ secrets.AWS_BACKEND_BUCKET_KEY }}" \
            -backend-config="encrypt=true"

      - name: Terraform apply
        run: terraform apply -auto-approve -input=false -no-color tfplan

      # Notify: send email
      - name: Send email notification on success
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          # secure: true
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "✅ Project - Toronto shared bike: Infrastructures update successed"
          to: ${{ secrets.EMAIL_USERNAME }}
          from: ${{ secrets.EMAIL_USERNAME }}
          html_body: |
            <h2>GitHub Actions CI/CD Notification</h2>
            <p><b>Project</b>: Toronto shared bike</p>
            <p><b>Repository</b>: ${{ github.repository }}</p>
            <p><b>Action</b>: Infrastructures update</p>
            <p><b>Status</b>: success</p>
            <p>Branch: <b>${{ github.base_ref }}</b></p>
            <p>Workflow: <b>${{ github.workflow }}</b></p>
            <p>Commit: <b>${{ github.sha }}</b></p>
            <p><a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Workflow Run</a></p>

      - name: Send email notification on failure
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          # secure: true
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "❌ Project - Toronto shared bike: Infrastructures update failed"
          to: ${{ secrets.EMAIL_USERNAME }}
          from: ${{ secrets.EMAIL_USERNAME }}
          html_body: |
            <h2>GitHub Actions CI/CD Notification</h2>
            <p><b>Project</b>: Toronto shared bike</p>
            <p><b>Repository</b>: ${{ github.repository }}</p>
            <p><b>Action</b>: Infrastructures update</p>
            <p><b>Status</b>: fail</p>
            <p>Branch: <b>${{ github.base_ref }}</b></p>
            <p>Workflow: <b>${{ github.workflow }}</b></p>
            <p>Commit: <b>${{ github.sha }}</b></p>
            <p><a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Workflow Run</a></p>

  dev_test_smoke:
    name: Dev Smoke Testing
    needs: dev_apply
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup K6
        uses: grafana/setup-k6-action@v1

      - name: Run local k6 test
        uses: grafana/run-k6-action@v1
        env:
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}
          K6_CLOUD_PROJECT_ID: ${{ secrets.K6_CLOUD_PROJECT_ID }}
        with:
          path: k6/script/cloud_smoke.js

  dev_test_load:
    name: Dev Load Testing
    needs: dev_test_smoke
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup K6
        uses: grafana/setup-k6-action@v1

      - name: Run local k6 test
        uses: grafana/run-k6-action@v1
        env:
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}
          K6_CLOUD_PROJECT_ID: ${{ secrets.K6_CLOUD_PROJECT_ID }}
        with:
          path: k6/script/cloud_load_20.js

  dev_test_stress:
    name: Dev Stress Testing
    needs: dev_test_load
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup K6
        uses: grafana/setup-k6-action@v1

      - name: Run local k6 test
        uses: grafana/run-k6-action@v1
        env:
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}
          K6_CLOUD_PROJECT_ID: ${{ secrets.K6_CLOUD_PROJECT_ID }}
        with:
          path: k6/script/cloud_stress.js
