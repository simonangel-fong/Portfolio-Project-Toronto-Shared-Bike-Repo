name: feature-push-ci

on:
  push:
    branches:
      - "feature/**"
    # paths:
    #   - "src/**"

# control the level of access
permissions:
  contents: read

# Cancel older runs per-branch to avoid races
concurrency:
  group: feature-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  TF_VAR_project: "toronto-shared-bike"
  TF_VAR_app: "restful-api"
  TF_VAR_env: dev

  LAMBDA_DIR: src/lambda
  TF_DIR: src/aws
  TF_VERSION: 1.9.8

jobs:
  lambda_unit_test:
    name: Lambda Unit Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.LAMBDA_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: place holder - unit test
        run: |
          pwd
          ls
          echo "Running Lambda unit tests..."

  terraform_validate:
    name: Terraform Validate / Lint / Scan
    needs: lambda_unit_test
    runs-on: ubuntu-latest
    env:
      TF_PLUGIN_CACHE_DIR: /home/runner/.terraform.d/plugin-cache
    defaults:
      run:
        working-directory: ${{ env.TF_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure plugin cache dir
        run: |
          mkdir -pv /home/runner/.terraform.d/plugin-cache
          echo 'plugin_cache_dir = "/home/runner/.terraform.d/plugin-cache"' > /home/runner/.terraformrc

      - name: Cache Terraform plugin dir
        uses: actions/cache@v4
        with:
          path: /home/runner/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ env.TF_VERSION }}

      - name: Terraform init (no backend)
        run: terraform init -backend=false -no-color

      - name: Terraform fmt
        run: terraform fmt -check -recursive -no-color

      - name: Terraform validate
        run: terraform validate -no-color

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.53.0

      - name: TFLint
        run: |
          tflint --init
          tflint -f compact

      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: ${{ env.TF_DIR }}
        continue-on-error: true # make it advisory; flip to false to fail builds

      - name: Summarize results
        if: always()
        run: |
          {
            echo "## CI Summary"
            echo ""
            echo "- **Project**: ${{ env.TF_VAR_project }}"
            echo "- **Application**: ${{ env.TF_VAR_app }}"
            echo "- **Env**: ${{ env.TF_VAR_env }}"
            echo "- **Job**: ${{ github.job }}"
            echo "- **Status**: ${{ job.status }}"
            echo "- **Branch**: ${{ github.ref }}"
            echo "- **Commit**: ${{ github.sha }}"
            echo ""
            echo "[View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Send email notification (optional)
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "✉️ ${{ env.TF_VAR_project}} ${{ env.TF_VAR_app}} (${{ env.TF_VAR_env}}): ${{ github.job }} ${{ job.status }}"
          to: ${{ secrets.EMAIL_USERNAME }}
          from: ${{ secrets.EMAIL_USERNAME }}
          html_body: ${{ steps.summary.outputs.summary }}