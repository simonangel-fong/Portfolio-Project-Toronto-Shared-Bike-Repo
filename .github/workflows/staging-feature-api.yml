name: api-staging

on:
  workflow_dispatch:
  push:
    branches: ["staging-feature-api"]
    paths:
      - "web-app/**" # update of code
      - "testing/**" # update of test case
      - ".github/workflows/staging-feature-api.yml"

# read write
permissions:
  contents: read
  id-token: write

# multiple trigger
concurrency:
  group: staging-cd-${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true # Cancel older runs

jobs:
  deploy_staging:
    name: Deploy Staging Env
    runs-on: ubuntu-latest
    environment: Staging
    timeout-minutes: 60
    env:
      DIR_WEB_APP_AWS: web-app/aws
      TF_PLUGIN_CACHE_DIR: /home/runner/.terraform.d/plugin-cache
      TF_VERSION: 1.9.8
      TF_VAR_project: ${{ vars.PROJECT }}
      TF_VAR_app: ${{ vars.APP_WEB }}
      TF_VAR_env: ${{ vars.ENV }}
      TF_VAR_dns_domain: ${{ vars.DNS_DOMAIN }}
      TF_VAR_aws_region: ${{ vars.AWS_REGION }}
      TF_VAR_cloudflare_api_token: ${{secrets.CF_API_TOKEN}}
      TF_VAR_cloudflare_zone_id: ${{secrets.CF_ZONE}}
    defaults:
      run:
        working-directory: ${{ env.DIR_WEB_APP_AWS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TF_AWS_ROLE }}
          aws-region: ${{ env.TF_VAR_aws_region }}

      - name: Configure Terraform plugin cache
        run: |
          mkdir -pv ~/.terraform.d/plugin-cache
          echo 'plugin_cache_dir = "~/.terraform.d/plugin-cache"' > ~/.terraformrc

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ env.TF_VERSION }}

      - name: Terraform init - S3 backend
        run: |
          terraform init -reconfigure -input=false \
            -backend-config="bucket=${{ vars.AWS_BACKEND_BUCKET }}" \
            -backend-config="region=${{ vars.AWS_REGION }}" \
            -backend-config="key=${{ vars.AWS_BACKEND_BUCKET_KEY }}/${{ vars.ENV }}/terraform.tfstate" \
            -backend-config="encrypt=true"

      - name: Terraform Validate
        run: |
          terraform fmt -check -recursive -no-color
          terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan -input=false -no-color

      - name: Show plan (JSON)
        run: terraform show -json tfplan > tfplan.json

      - name: Save plan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-bundle
          path: |
            ${{ env.DIR_WEB_APP_AWS }}/tfplan
            ${{ env.DIR_WEB_APP_AWS }}/tfplan.json
          retention-days: 3

      - name: Terraform Apply - Staging
        run: terraform apply -auto-approve -no-color tfplan

  test_staging:
    name: Integrate Testing(K6)
    needs: deploy_staging
    runs-on: ubuntu-latest
    environment: Staging
    env:
      DIR_LOAD_TESTING: testing/load
      TF_PLUGIN_CACHE_DIR: /home/runner/.terraform.d/plugin-cache
      TF_VERSION: 1.9.8
      TF_VAR_project: ${{ vars.PROJECT }}
      TF_VAR_app: ${{ vars.APP_WEB }}
      TF_VAR_env: ${{ vars.ENV }}
      TF_VAR_dns_domain: ${{ vars.DNS_DOMAIN }}
      TF_VAR_aws_region: ${{ vars.AWS_REGION }}
      TF_VAR_cloudflare_api_token: ${{secrets.CF_API_TOKEN}}
      TF_VAR_cloudflare_zone_id: ${{secrets.CF_ZONE}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup K6
        uses: grafana/setup-k6-action@v1

      - name: Run k6 test
        uses: grafana/run-k6-action@v1
        id: testing_k6
        env:
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}
          K6_CLOUD_PROJECT_ID: ${{ secrets.K6_CLOUD_PROJECT_ID }}
        with:
          debug: true
          fail-fast: true
          flags: --env DNS_DOMAIN=${{ env.TF_VAR_dns_domain }} --env API_ENV=${{ env.TF_VAR_env }}
          path: |
            ${{ env.DIR_LOAD_TESTING }}/cloud_smoke.js
            ${{ env.DIR_LOAD_TESTING }}/cloud_load.js
            ${{ env.DIR_LOAD_TESTING }}/cloud_stress.js

      - name: Send email notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465`
          secure: true
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "✉️ ${{ vars.PROJECT}} ${{vars.APP_WEB}} (${{vars.ENV}}): ${{ github.job }} ${{ job.status }}"
          to: ${{ secrets.EMAIL_USERNAME }}
          from: ${{ secrets.EMAIL_USERNAME }}
          html_body: |
            <h2>GitHub Actions CI/CD Notification</h2>
            <p><b>Project</b>: ${{ vars.PROJECT}}</p>
            <p><b>Application</b>: ${{ vars.APP_WEB}}</p>
            <p><b>Repository</b>: ${{ github.repository }}</p>
            <p><b>Env</b>: ${{ vars.ENV }}</p>
            <p><b>Job</b>: ${{ github.job }}</p>
            <p><b>Status</b>: ${{ job.status }}</p>
            <p><b>Branch</b>: ${{ github.ref }}</p>
            <p><b>Test ID</b>: ${{ steps.testing_k6.outputs.testRunIds }}</p>
            <p><b>Workflow</b>: ${{ github.workflow }}</p>
            <p><b>Commit</b>: ${{ github.sha }}</p>
            <p><a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Workflow Run</a></p>
