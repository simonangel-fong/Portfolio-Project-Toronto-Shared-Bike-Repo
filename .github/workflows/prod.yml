name: Terraform CI/CD

on:
  push:
    branches:
      - master
    # paths:
    #   - "src/aws/**"

jobs:
  provision_prod:
    name: Provision Prod
    runs-on: ubuntu-latest
    environment: Prod
    timeout-minutes: 60
    env:
      TF_PLUGIN_CACHE_DIR: /home/runner/.terraform.d/plugin-cache
    defaults:
      run:
        working-directory: ${{ vars.DIR_AWS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ vars.DIR_AWS }}

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_TF_ROLE_ARN }}
          aws-region: ${{ vars.TF_VAR_AWS_REGION }}

      - name: Configure Terraform plugin cache
        run: |
          mkdir -pv ~/.terraform.d/plugin-cache
          echo 'plugin_cache_dir = "~/.terraform.d/plugin-cache"' > ~/.terraformrc

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ vars.TF_VERSION }}

      - name: Terraform init - S3 backend
        run: |
          terraform init -reconfigure -input=false \
            -backend-config="bucket=${{ secrets.AWS_BACKEND_BUCKET }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="key=${{ secrets.AWS_BACKEND_BUCKET_KEY }}/${{ vars.TF_VAR_ENV }}/terraform.tfstate" \
            -backend-config="encrypt=true"

      - name: Terraform Validate
        run: |
          terraform fmt -check -recursive -no-color
          terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan -input=false -no-color

      - name: Save plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ${{ vars.DIR_AWS }}/tfplan
          retention-days: 1

      - name: Cache Terraform providers and modules
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.TF_PLUGIN_CACHE_DIR }}
            ${{ vars.DIR_AWS }}/.terraform/modules
          key: ${{ runner.os }}-tf-${{ vars.TF_VERSION }}-${{ hashFiles(format('{0}/**/.terraform.lock.hcl', vars.DIR_AWS)) }}
          restore-keys: |
            ${{ runner.os }}-tf-${{ vars.TF_VERSION }}-
            ${{ runner.os }}-tf-

  #     - name: Terraform init (S3 backend)
  #       run: |
  #         terraform init -reconfigure -input=false \
  #           -backend-config="bucket=${{ secrets.AWS_BACKEND_BUCKET }}" \
  #           -backend-config="region=${{ secrets.AWS_REGION }}" \
  #           -backend-config="key=${{ secrets.AWS_BACKEND_BUCKET_KEY }}/${{ env.TF_VAR_env }}/terraform.tfstate" \
  #           -backend-config="encrypt=true"

  #     - name: Terraform fmt
  #       run: terraform fmt -check -recursive -no-color

  #     - name: Terraform validate
  #       run: terraform validate -no-color

  #     - name: Terraform plan
  #       run: terraform plan -out=tfplan -input=false -no-color

  #     - name: Save plan artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: tfplan
  #         path: ${{ env.TF_WORKING_DIR }}/tfplan
  #         retention-days: 1

  #     - name: Send email notification on failure
  #       if: failure()
  #       uses: dawidd6/action-send-mail@v3
  #       with:
  #         server_address: smtp.gmail.com
  #         server_port: 465`
  #         secure: true
  #         username: ${{ secrets.EMAIL_USERNAME }}
  #         password: ${{ secrets.EMAIL_PASSWORD }}
  #         subject: "✉️ ${{ env.TF_VAR_project}} ${{env.TF_VAR_app}} (${{env.TF_VAR_env}}): ${{ github.job }} ${{ job.status }}"
  #         to: ${{ secrets.EMAIL_USERNAME }}
  #         from: ${{ secrets.EMAIL_USERNAME }}
  #         html_body: |
  #           <h2>GitHub Actions CI/CD Notification</h2>
  #           <p><b>Project</b>: ${{ env.TF_VAR_project}}</p>
  #           <p><b>Application</b>: ${{ env.TF_VAR_app}}</p>
  #           <p><b>Repository</b>: ${{ github.repository }}</p>
  #           <p><b>Env</b>: ${{ env.TF_VAR_env }}</p>
  #           <p><b>Job</b>: ${{ github.job }}</p>
  #           <p><b>Status</b>: ${{ job.status }}</p>
  #           <p><b>Branch</b>: ${{ github.ref }}</p>
  #           <p><b>Workflow</b>: ${{ github.workflow }}</p>
  #           <p><b>Commit</b>: ${{ github.sha }}</p>
  #           <p><a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Workflow Run</a></p>

  # # The `apply` job will run after manual approval and apply the plan.
  # apply:
  #   name: "Terraform Apply"
  #   runs-on: ubuntu-latest
  #   needs: plan

  #   # The `environment` block is crucial for manual approval.
  #   # The `url` field can link to a custom deployment dashboard.
  #   environment:
  #     name: Prod
  #     url: https://docs.github.com/en/actions/deployment/protecting-deployments

  #   # Configure permissions to allow for applying the plan
  #   permissions:
  #     contents: read
  #     id-token: write

  #   # The job steps
  #   steps:
  #     # Checkout the repository code
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: apply
  #       run: |
  #         echo "apply"
