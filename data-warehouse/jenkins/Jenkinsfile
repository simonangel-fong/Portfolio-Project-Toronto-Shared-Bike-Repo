pipeline {
  agent any

  options {
    // limit only one instance
    disableConcurrentBuilds()
    // show timestamp for event
    timestamps()
    // discard old builds
    buildDiscarder(
      logRotator(
        numToKeepStr: '30',   // maximum of the last 30 build logs
        artifactNumToKeepStr: '10'    // maximum of the last 10 sets of build artifacts
      )
    )
    // set a timeout for the entire pipeline run
    timeout(time: 60, unit: 'MINUTES')
  }

  triggers {
    cron 'H H/4 * * *'    // run every four hours
  }

  environment {
    POSTGRES_USER = 'postgres'
    POSTGRES_PASSWORD = 'SecurePassword123'
    POSTGRES_DB = 'toronto_shared_bike'
    PGDATA = '/var/lib/postgresql/data/pgdata'
    S3_PROFILE = 'toronto_shared_bike'
    S3_BUCKET  = 'toronto-shared-bike-data-warehouse-data-bucket'
    RAW_URL = 'https://toronto-shared-bike-data-warehouse-data-bucket.s3.ca-central-1.amazonaws.com/raw/data.zip'
    S3_PREFIX  = "mv" 
    // EXPORT_DIR = '/export'
    
    COMPOSE_PROJECT_NAME = "${env.JOB_NAME}-${env.BUILD_NUMBER}"
    PRJECT_NAME = 'toronto_shared_bike'
    POSTGRES_DIR = 'data-warehouse/postgresql'
    POSTGRES_DOCKE_FILE = 'data-warehouse/postgresql/docker-compose.yaml'
    EXPORT_DIR = 'data-warehouse/postgresql/export'
    AWS_REGION = 'ca-central-1'
    S3_CREDENTIAL = 'toronto_shared_bike'
  }

  stages {

    stage('Start PostgreSQL') {
      steps {
        dir(env.POSTGRES_DIR) {
          sh '''
            docker compose -f docker-compose.yaml down
            docker compose -f docker-compose.yaml up -d --build

            # Wait until Postgres is ready instead of sleeping blindly
            until docker exec -t postgresql bash -lc 'pg_isready -U "${POSTGRES_USER:-postgres}" -d "${POSTGRES_DB:-toronto_shared_bike}"'; do
              echo "Waiting for PostgreSQL to become ready..."
              sleep 3
            done

            docker logs --tail=100 postgresql || true
            docker ps
          '''
        }
      }
    }

    // stage('Extract Data') {
    //   steps {
    //     sh '''
    //     docker exec -t postgresql bash /scripts/etl/extract.sh
    //     '''
    //   }
    // }

    // stage('Transform Data') {
    //   steps {
    //     sh '''
    //     docker exec -t postgresql bash /scripts/etl/transform.sh
    //     '''
    //   }
    // }

    // stage('Load Data') {
    //   steps {
    //     sh '''
    //     docker exec -t postgresql bash /scripts/etl/load.sh
    //     '''
    //   }
    // }

    // stage('Refresh Materialized Views') {
    //   steps {
    //     sh '''
    //     docker exec -t postgresql bash /scripts/mv/mv_refresh.sh
    //     '''
    //   }
    // }

    stage('Export Data') {
      steps {
        sh '''
          mkdir -pv "${EXPORT_DIR}"
          chown 999:999 "${EXPORT_DIR}"
          docker exec -t postgresql bash /scripts/export/export.sh
        '''
      }
    }

    stage('Upload to S3') {
      steps {
        script{
          withAWS(credentials: env.S3_CREDENTIAL, region: env.AWS_REGION) {
            s3Upload(
              bucket:"toronto-shared-bike-data-warehouse-data-bucket", 
              path:'test', 
              workingDir:'/export',
              includePathPattern:'**/*.csv',
            )
          }
        }
      }
    }
  }

  post {
    always {
      sh '''
      docker compose -f data-warehouse/postgresql/docker-compose.yaml down
      '''
    }
    
  //   failure {
  //     emailext (
  //       to: "tech.arguswatcher@gmail.com",
  //       subject: "FAILURE: ${env.JOB_NAME} - Build #${env.BUILD_NUMBER}",
  //       body: "The Jenkins pipeline '${env.JOB_NAME}' failed.\n" +
  //         "Build URL: ${env.BUILD_URL}",
  //     )
  //   }

  //   success {
  //     emailext (
  //       to: "tech.arguswatcher@gmail.com",
  //       subject: "SUCCESS: ${env.JOB_NAME} - Build #${env.BUILD_NUMBER}",
  //       body: "The Jenkins pipeline '${env.JOB_NAME}' completed successfully.\n" +
  //         "Build URL: ${env.BUILD_URL}",
  //     )
  //   }
  }
}
