pipeline {
  agent any

  triggers {
    githubPush() // Triggers on GitHub push events
  }

  environment {
    POSTGRES_DB = "toronto_shared_bike"
  }

  stages {

    stage('Clone repo') {
      steps {
        cleanWs()
        checkout scmGit(
          branches: [[name: 'feature-dw-dev']], 
          userRemoteConfigs: [[url: 'https://github.com/simonangel-fong/Portfolio-Project-Toronto-Shared-Bike-Repo.git']]
        )
      }
    }

    stage('Start PostgreSQL') {
      steps {
        script{
          withCredentials([
            string(credentialsId: 'postgres_user', variable: 'POSTGRES_USER'),
            string(credentialsId: 'postgres_password', variable: 'POSTGRES_PASSWORD'),
            ]) {
              dir("data-warehouse/postgresql"){
                echo "#################### Spin up PGDB ####################"
                sh '''
                  pwd
                  ls -l
                  docker compose down -v
                  docker compose up -d --build

                  # Wait until Postgres is ready
                  until docker exec -t postgresql bash -lc 'pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB"'; do
                    echo "Waiting for PostgreSQL to become ready..."
                    sleep 5
                  done
                '''

                echo "#################### Confirm PGDB ####################"
                sh '''
                  docker ps
                  docker logs --tail=100 postgresql || true
                '''
              }
          }
        }
      }
    }

    stage('PostgreSQL Check') {
      steps {
        dir("data-warehouse/postgresql"){
          echo "#################### test ####################"
          sh '''
          ls -l
          docker exec -it postgresql bash /scripts/testing/object_check.sh
          '''
        }
      }
    }
  }

  post {
    always {
      dir("data-warehouse/postgresql"){


      echo "#################### Cleanup PGDB ####################"
      sh '''
      docker compose down -v
      '''

      // echo "#################### Cleanup Workspace ####################"
      // cleanWs()
      }
    }
  }
}