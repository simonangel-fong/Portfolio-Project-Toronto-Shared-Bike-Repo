pipeline {
  agent any

  options {
    // limit only one instance
    // disableConcurrentBuilds()
    // show timestamp for event
    timestamps()
  //   // discard old builds
  //   buildDiscarder(
  //     logRotator(
  //       // maximum number of the last build logs
  //       numToKeepStr: '10',   
  //       // maximum number of the last sets of build artifacts
  //       artifactNumToKeepStr: '5'   
  //     )
  //   )
  //   // set a timeout for the entire pipeline run
  //   timeout(time: 60, unit: 'MINUTES')

  //   //Prevents Jenkins from automatically checking out the SCM.
  //   skipDefaultCheckout(true)
  }

  environment {
    POSTGRES_USER = credentials('postgres_user')
    POSTGRES_PASSWORD = credentials('postgres_password')
    POSTGRES_DB = credentials('postgres_db')
  }

  stages {

    // stage('Cleanup Workspace & Checkout') {
    //   steps {
    //     echo "#################### Cleans the workspace ####################"
    //     cleanWs()
        
    //     echo "#################### Checkout ####################"
    //     checkout scm // Explicitly checks out the SCM after cleaning.

    //     sh """
    //       ls
    //       pwd
    //       echo "${POSTGRES_USER}"
    //     """
    //   }
    // }

    stage('Start PostgreSQL') {
      steps {
        dir('data-warehouse/postgresql'){
          echo "#################### Spin up PGDB ####################"
          sh '''
            pwd
            ls
            ls /docker-entrypoint-initdb.d
            docker compose down -v
            docker compose up --build

            # Wait until Postgres is ready
            until docker exec -t postgresql bash -lc 'pg_isready -U "${POSTGRES_USER:-postgres}" -d "${POSTGRES_DB:-toronto_shared_bike}"'; do
              echo "Waiting for PostgreSQL to become ready..."
              sleep 10
            done
          '''

          echo "#################### Confirm PGDB ####################"
          sh '''
            docker ps
            docker logs --tail=100 postgresql || true
          '''
        }
      }
    }
  }
}
 